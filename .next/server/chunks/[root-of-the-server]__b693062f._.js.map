{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/adsli/EstudoRank-patched-2025-10-22/estudorank/src/lib/supabase/server.ts"],"sourcesContent":["// src/lib/supabase/server.ts\r\nimport { cookies } from \"next/headers\";\r\nimport { createServerClient } from \"@supabase/ssr\";\r\n\r\nexport function supabaseServer() {\r\n  const cookieStore = cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name, value, options) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name, options) {\r\n          cookieStore.set({ name, value: \"\", ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;;AAC7B;AACA;AAAA;;;AAEO,SAAS;IACd,MAAM,cAAc,IAAA,4IAAO;IAE3B,OAAO,IAAA,iMAAkB,iVAGvB;QACE,SAAS;YACP,KAAI,IAAI;gBACN,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAI,EAAE,KAAK,EAAE,OAAO;gBACtB,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAI,EAAE,OAAO;gBAClB,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/adsli/EstudoRank-patched-2025-10-22/estudorank/src/app/api/ranking/route.ts"],"sourcesContent":["// app/api/ranking/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\";\r\nimport { supabaseServer } from \"@/lib/supabase/server\";\r\n\r\nexport const dynamic = \"force-dynamic\";\r\nexport const revalidate = 0;\r\n\r\n/** ======= Tipos ======= */\r\ntype LeaderboardItem = {\r\n  user_id: string;\r\n  name?: string | null;\r\n  email?: string | null;\r\n  points: number;\r\n  total: number; // alias de points para compat\r\n};\r\n\r\ntype ViewRow = {\r\n  user_id: string | null;\r\n  total?: number | null;\r\n  points?: number | null;\r\n  name?: string | null;\r\n  display_name?: string | null;\r\n  username?: string | null;\r\n  email?: string | null;\r\n};\r\n\r\ntype ProgressRow = { user_id: string | null; points: number | null };\r\ntype PointsRow = { user_id: string | null; value: number | null };\r\n\r\nfunction parseIntSafe(v: string | null | undefined, def: number): number {\r\n  if (!v) return def;\r\n  const n = Number.parseInt(v, 10);\r\n  return Number.isFinite(n) && n > 0 ? n : def;\r\n}\r\n\r\n/** Preferimos um client admin (service role) para evitar RLS na listagem global. */\r\nasync function getServerClient(): Promise<{ client: SupabaseClient; isAdmin: boolean }> {\r\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\n  if (url && serviceKey) {\r\n    const client = createClient(url, serviceKey, {\r\n      auth: { persistSession: false, autoRefreshToken: false },\r\n    });\r\n    return { client, isAdmin: true };\r\n  }\r\n\r\n  // fallback: cookie-based (pode sofrer com RLS dependendo das policies)\r\n  const client = await supabaseServer();\r\n  // @ts-expect-error: nosso helper retorna SupabaseClient\r\n  return { client, isAdmin: false };\r\n}\r\n\r\n/** Utilitário para ordenar/recortar página em memória. */\r\nfunction paginate<T>(arr: T[], page: number, pageSize: number) {\r\n  const total = arr.length;\r\n  const pages = Math.max(1, Math.ceil(total / pageSize));\r\n  const from = (page - 1) * pageSize;\r\n  const to = from + pageSize;\r\n  const slice = arr.slice(from, to);\r\n  return { slice, total, pages };\r\n}\r\n\r\n/** ======= Handlers ======= */\r\nexport async function GET(req: Request) {\r\n  const url = new URL(req.url);\r\n  const page = Math.max(1, parseIntSafe(url.searchParams.get(\"page\"), 1));\r\n  const pageSize = Math.min(100, Math.max(1, parseIntSafe(url.searchParams.get(\"pageSize\"), 25)));\r\n\r\n  try {\r\n    const { client: supabase, isAdmin } = await getServerClient();\r\n\r\n    /** ---------- 1) Tenta pela VIEW 'user_points_view' ---------- */\r\n    try {\r\n      const { data, error, count } = await supabase\r\n        .from(\"user_points_view\")\r\n        .select(\"user_id,total,points,name,display_name,username,email\", { count: \"exact\" })\r\n        .order(\"total\", { ascending: false })\r\n        .range((page - 1) * pageSize, (page * pageSize) - 1);\r\n\r\n      if (!error && Array.isArray(data)) {\r\n        const leaderboard: LeaderboardItem[] = (data as ViewRow[])\r\n          .filter((r) => !!r.user_id)\r\n          .map((r) => {\r\n            const val =\r\n              (typeof r.total === \"number\" && Number.isFinite(r.total)) ? r.total! :\r\n              (typeof r.points === \"number\" && Number.isFinite(r.points)) ? r.points! : 0;\r\n            const display =\r\n              r.display_name || r.username || r.name || r.email || null;\r\n\r\n            return {\r\n              user_id: r.user_id!,\r\n              name: display,\r\n              email: r.email ?? null,\r\n              points: val,\r\n              total: val,\r\n            };\r\n          });\r\n\r\n        return NextResponse.json({\r\n          ok: true,\r\n          leaderboard,\r\n          page,\r\n          pageSize,\r\n          total: typeof count === \"number\" ? count : leaderboard.length,\r\n          pages: typeof count === \"number\" ? Math.max(1, Math.ceil(count / pageSize)) : 1,\r\n          via: \"view\",\r\n          adminClient: isAdmin,\r\n        }, { headers: { \"Cache-Control\": \"no-store\" } });\r\n      }\r\n      // cai para fallback\r\n    } catch {\r\n      // segue para fallback\r\n    }\r\n\r\n    /** ---------- 2) Fallback: agrega a partir de 'progress' ---------- */\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"progress\")\r\n        .select(\"user_id,points\")\r\n        .returns<ProgressRow[]>();\r\n\r\n      if (!error && Array.isArray(data)) {\r\n        const totals = new Map<string, number>();\r\n        for (const r of data) {\r\n          if (!r.user_id) continue;\r\n          const add = Number.isFinite(r.points as number) ? (r.points as number) : 0;\r\n          totals.set(r.user_id, (totals.get(r.user_id) ?? 0) + add);\r\n        }\r\n\r\n        // Ordena por pontos desc\r\n        const rows = [...totals.entries()]\r\n          .map(([user_id, total]) => ({ user_id, total }))\r\n          .sort((a, b) => b.total - a.total);\r\n\r\n        // Pagina em memória\r\n        const { slice, total, pages } = paginate(rows, page, pageSize);\r\n\r\n        // Busca perfis só dos usuários da página\r\n        const ids = slice.map((r) => r.user_id);\r\n        let profiles = new Map<string, { name?: string | null; email?: string | null }>();\r\n        if (ids.length) {\r\n          const { data: profs } = await supabase\r\n            .from(\"profiles\")\r\n            .select(\"id,display_name,username,name,email\")\r\n            .in(\"id\", ids);\r\n\r\n          if (Array.isArray(profs)) {\r\n            profiles = new Map(\r\n              profs.map((p: any) => [\r\n                p.id,\r\n                {\r\n                  name: p.display_name || p.username || p.name || p.email || null,\r\n                  email: p.email ?? null,\r\n                },\r\n              ]),\r\n            );\r\n          }\r\n        }\r\n\r\n        const leaderboard: LeaderboardItem[] = slice.map((r) => {\r\n          const p = profiles.get(r.user_id);\r\n          const val = r.total ?? 0;\r\n          return {\r\n            user_id: r.user_id,\r\n            name: p?.name ?? null,\r\n            email: p?.email ?? null,\r\n            points: val,\r\n            total: val,\r\n          };\r\n        });\r\n\r\n        return NextResponse.json({\r\n          ok: true,\r\n          leaderboard,\r\n          page,\r\n          pageSize,\r\n          total,\r\n          pages,\r\n          via: \"progress\",\r\n          adminClient: isAdmin,\r\n        }, { headers: { \"Cache-Control\": \"no-store\" } });\r\n      }\r\n      // cai para 3º fallback\r\n    } catch {\r\n      // segue\r\n    }\r\n\r\n    /** ---------- 3) Último fallback: agrega a partir de 'points' ---------- */\r\n    const { data: pointsRows, error: pointsErr } = await supabase\r\n      .from(\"points\")\r\n      .select(\"user_id,value\")\r\n      .returns<PointsRow[]>();\r\n\r\n    if (pointsErr) throw pointsErr;\r\n\r\n    const totals = new Map<string, number>();\r\n    for (const r of pointsRows ?? []) {\r\n      if (!r.user_id) continue;\r\n      const add = Number.isFinite(r.value as number) ? (r.value as number) : 0;\r\n      totals.set(r.user_id, (totals.get(r.user_id) ?? 0) + add);\r\n    }\r\n\r\n    const rows = [...totals.entries()]\r\n      .map(([user_id, total]) => ({ user_id, total }))\r\n      .sort((a, b) => b.total - a.total);\r\n\r\n    const { slice, total, pages } = paginate(rows, page, pageSize);\r\n\r\n    const ids = slice.map((r) => r.user_id);\r\n    let profiles = new Map<string, { name?: string | null; email?: string | null }>();\r\n    if (ids.length) {\r\n      const { data: profs } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"id,display_name,username,name,email\")\r\n        .in(\"id\", ids);\r\n\r\n      if (Array.isArray(profs)) {\r\n        profiles = new Map(\r\n          profs.map((p: any) => [\r\n            p.id,\r\n            {\r\n              name: p.display_name || p.username || p.name || p.email || null,\r\n              email: p.email ?? null,\r\n            },\r\n          ]),\r\n        );\r\n      }\r\n    }\r\n\r\n    const leaderboard: LeaderboardItem[] = slice.map((r) => {\r\n      const p = profiles.get(r.user_id);\r\n      const val = r.total ?? 0;\r\n      return {\r\n        user_id: r.user_id,\r\n        name: p?.name ?? null,\r\n        email: p?.email ?? null,\r\n        points: val,\r\n        total: val,\r\n      };\r\n    });\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      leaderboard,\r\n      page,\r\n      pageSize,\r\n      total,\r\n      pages,\r\n      via: \"points\",\r\n      adminClient: isAdmin,\r\n    }, { headers: { \"Cache-Control\": \"no-store\" } });\r\n\r\n  } catch (err: any) {\r\n    console.error(\"[/api/ranking] error:\", err?.message || err);\r\n    return NextResponse.json(\r\n      { ok: false, error: err?.message ?? \"server_error\" },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}