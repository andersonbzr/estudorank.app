{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/adsli/EstudoRank-patched-2025-10-22/estudorank/src/app/api/admin/chat/clear/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nexport const dynamic = \"force-dynamic\";\r\n\r\nfunction requireAdminSecret() {\r\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\r\n  const key = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n  if (!url || !key) {\r\n    throw new Error(\"Service Role nÃ£o configurado (SUPABASE_SERVICE_ROLE_KEY).\");\r\n  }\r\n  return { url, key };\r\n}\r\n\r\n/**\r\n * POST /api/admin/chat/clear\r\n * body: { channel?: string, all?: boolean }\r\n * - channel: nome do canal do chat (ex.: \"ranking-global\")\r\n * - all: se true, apaga todas as mensagens (cautela!)\r\n */\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { url, key } = requireAdminSecret();\r\n    const admin = createClient(url, key, {\r\n      auth: { persistSession: false, autoRefreshToken: false },\r\n    });\r\n\r\n    const body = await req.json().catch(() => ({}));\r\n    const channel = typeof body?.channel === \"string\" ? body.channel.trim() : \"\";\r\n    const all = !!body?.all;\r\n\r\n    if (!all && !channel) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Envie 'channel' ou use 'all: true'.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (all) {\r\n      const { error } = await admin.from(\"messages\").delete().neq(\"id\", \"\");\r\n      if (error) throw error;\r\n      return NextResponse.json({ ok: true, cleared: \"all\" });\r\n    }\r\n\r\n    const { error } = await admin.from(\"messages\").delete().eq(\"channel\", channel);\r\n    if (error) throw error;\r\n    return NextResponse.json({ ok: true, cleared: channel });\r\n  } catch (err: any) {\r\n    return NextResponse.json(\r\n      { ok: false, error: err?.message ?? \"server_error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEO,MAAM,UAAU;AAEvB,SAAS;IACP,MAAM;IACN,MAAM,MAAM,QAAQ,GAAG,CAAC,yBAAyB;IACjD,IAAI,CAAC,OAAO,CAAC,KAAK;QAChB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;QAAE;QAAK;IAAI;AACpB;AAQO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;QACrB,MAAM,QAAQ,IAAA,yMAAY,EAAC,KAAK,KAAK;YACnC,MAAM;gBAAE,gBAAgB;gBAAO,kBAAkB;YAAM;QACzD;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC,CAAC,CAAC;QAC7C,MAAM,UAAU,OAAO,MAAM,YAAY,WAAW,KAAK,OAAO,CAAC,IAAI,KAAK;QAC1E,MAAM,MAAM,CAAC,CAAC,MAAM;QAEpB,IAAI,CAAC,OAAO,CAAC,SAAS;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,IAAI;gBAAO,OAAO;YAAsC,GAC1D;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,KAAK;YACP,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,IAAI,CAAC,YAAY,MAAM,GAAG,GAAG,CAAC,MAAM;YAClE,IAAI,OAAO,MAAM;YACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,IAAI;gBAAM,SAAS;YAAM;QACtD;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,IAAI,CAAC,YAAY,MAAM,GAAG,EAAE,CAAC,WAAW;QACtE,IAAI,OAAO,MAAM;QACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,IAAI;YAAM,SAAS;QAAQ;IACxD,EAAE,OAAO,KAAU;QACjB,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,IAAI;YAAO,OAAO,KAAK,WAAW;QAAe,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}