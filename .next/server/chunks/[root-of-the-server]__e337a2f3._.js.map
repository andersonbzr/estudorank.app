{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/adsli/EstudoRank-patched-2025-10-22/estudorank/src/lib/supabase/server.ts"],"sourcesContent":["// src/lib/supabase/server.ts\r\nimport { cookies } from \"next/headers\";\r\nimport { createServerClient } from \"@supabase/ssr\";\r\n\r\nexport function supabaseServer() {\r\n  const cookieStore = cookies();\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name) { return cookieStore.get(name)?.value; },\r\n        set(name, value, options) { cookieStore.set({ name, value, ...options }); },\r\n        remove(name, options) { cookieStore.set({ name, value: \"\", ...options }); },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;;AAC7B;;;;;;;;AAGO,SAAS;IACd,MAAM,cAAc,IAAA,4IAAO;IAC3B,OAAO,kWAGL;QACE,SAAS;YACP,KAAI,IAAI;gBAAI,OAAO,YAAY,GAAG,CAAC,OAAO;YAAO;YACjD,KAAI,IAAI,EAAE,KAAK,EAAE,OAAO;gBAAI,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAAI;YAC1E,QAAO,IAAI,EAAE,OAAO;gBAAI,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAAI;QAC5E;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/adsli/EstudoRank-patched-2025-10-22/estudorank/src/app/api/ranking/route.ts"],"sourcesContent":["// app/api/ranking/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport { supabaseServer } from \"@/lib/supabase/server\";\r\n\r\n/**\r\n * GET /api/ranking\r\n * Query params:\r\n *   - page?: number (default 1, min 1)\r\n *   - pageSize?: number (default 25, 1..100)\r\n *\r\n * Response:\r\n * {\r\n *   ok: boolean,\r\n *   leaderboard: Array<{ user_id: string; name?: string; email?: string; points: number; total: number }>,\r\n *   page: number,\r\n *   pageSize: number,\r\n *   total: number,\r\n *   pages: number\r\n * }\r\n *\r\n * Observações:\r\n * - Tenta usar a view/materialized view `user_points_view` com colunas:\r\n *     user_id, total (ou points), name?, email?\r\n * - Fallback: agrega a partir da tabela `points` (colunas esperadas: user_id, value)\r\n *             e junta com `profiles` (id, name, email).\r\n * - Nenhuma chave sensível é usada no cliente; isto executa server-side.\r\n */\r\n\r\ntype LeaderboardRow = {\r\n  user_id: string;\r\n  name?: string | null;\r\n  email?: string | null;\r\n  points: number; // alias de total\r\n  total: number;  // compatibilidade com clientes que leem `total`\r\n};\r\n\r\nfunction parseIntSafe(v: string | null | undefined, def: number): number {\r\n  if (!v) return def;\r\n  const n = Number.parseInt(v, 10);\r\n  return Number.isFinite(n) && n > 0 ? n : def;\r\n}\r\n\r\nexport async function GET(req: Request) {\r\n  const url = new URL(req.url);\r\n  const page = Math.max(1, parseIntSafe(url.searchParams.get(\"page\"), 1));\r\n  const pageSize = Math.min(100, Math.max(1, parseIntSafe(url.searchParams.get(\"pageSize\"), 25)));\r\n  const from = (page - 1) * pageSize;\r\n  const to = from + pageSize - 1;\r\n\r\n  const supabase = await supabaseServer();\r\n\r\n  /** -------------------- 1) Tenta via VIEW otimizada -------------------- */\r\n  try {\r\n    // Tentamos suportar tanto `total` quanto `points` como nome da coluna agregada.\r\n    const { data, error, count } = await supabase\r\n      .from(\"user_points_view\")\r\n      .select(\"user_id,name,email,total,points\", { count: \"exact\" })\r\n      .order(\"total\", { ascending: false }) // se `total` existir, ordena por ele\r\n      .range(from, to);\r\n\r\n    if (!error && Array.isArray(data)) {\r\n      const leaderboard: LeaderboardRow[] = data.map((row: any) => {\r\n        const val = typeof row.total === \"number\" ? row.total : (typeof row.points === \"number\" ? row.points : 0);\r\n        return {\r\n          user_id: row.user_id,\r\n          name: row.name ?? null,\r\n          email: row.email ?? null,\r\n          points: val,\r\n          total: val,\r\n        };\r\n      });\r\n\r\n      const total = typeof count === \"number\" ? count : leaderboard.length;\r\n      const pages = Math.max(1, Math.ceil(total / pageSize));\r\n\r\n      return NextResponse.json({\r\n        ok: true,\r\n        leaderboard,\r\n        page,\r\n        pageSize,\r\n        total,\r\n        pages,\r\n      });\r\n    }\r\n    // Se deu erro, cai para fallback\r\n  } catch {\r\n    // segue para fallback\r\n  }\r\n\r\n  /** -------------------- 2) Fallback: agrega na aplicação -------------------- */\r\n  try {\r\n    // Carrega todos os pontos (ou uma janela grande; ajuste se o dataset crescer muito)\r\n    // Espera-se uma tabela `points` com colunas: user_id (uuid/text), value (number)\r\n    const { data: pointsRows, error: pointsErr } = await supabase\r\n      .from(\"points\")\r\n      .select(\"user_id,value\");\r\n\r\n    if (pointsErr) {\r\n      return NextResponse.json({ ok: false, error: pointsErr.message }, { status: 500 });\r\n    }\r\n\r\n    // Agrega soma por usuário\r\n    const map = new Map<string, number>();\r\n    for (const r of pointsRows as Array<{ user_id: string; value: number }>) {\r\n      const curr = map.get(r.user_id) ?? 0;\r\n      map.set(r.user_id, curr + (Number.isFinite(r.value) ? r.value : 0));\r\n    }\r\n\r\n    const aggregated = Array.from(map.entries())\r\n      .map(([user_id, total]) => ({ user_id, total }))\r\n      .sort((a, b) => b.total - a.total);\r\n\r\n    const totalCount = aggregated.length;\r\n    const pages = Math.max(1, Math.ceil(totalCount / pageSize));\r\n    const sliced = aggregated.slice(from, to + 1);\r\n\r\n    // Busca perfis apenas dos que estão nesta página (evita query enorme)\r\n    const ids = sliced.map((r) => r.user_id);\r\n    let profilesById = new Map<string, { name?: string | null; email?: string | null }>();\r\n    if (ids.length > 0) {\r\n      const { data: profiles, error: profilesErr } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"id,name,email\")\r\n        .in(\"id\", ids);\r\n\r\n      if (!profilesErr && Array.isArray(profiles)) {\r\n        profilesById = new Map(\r\n          profiles.map((p: any) => [p.id, { name: p.name ?? null, email: p.email ?? null }])\r\n        );\r\n      }\r\n    }\r\n\r\n    const leaderboard: LeaderboardRow[] = sliced.map((r) => {\r\n      const prof = profilesById.get(r.user_id);\r\n      const val = r.total ?? 0;\r\n      return {\r\n        user_id: r.user_id,\r\n        name: prof?.name ?? null,\r\n        email: prof?.email ?? null,\r\n        points: val,\r\n        total: val,\r\n      };\r\n    });\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      leaderboard,\r\n      page,\r\n      pageSize,\r\n      total: totalCount,\r\n      pages,\r\n    });\r\n  } catch (err: any) {\r\n    return NextResponse.json(\r\n      { ok: false, error: err?.message ?? \"unexpected_error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}